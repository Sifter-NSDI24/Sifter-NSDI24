# Enqueue descriptors
# V <delay> <pkt_len> <fin_time> <flow_id> <pkt_id>
# Initial pkts
V 39 256 1 0 0
V 39 256 1 1 0
V 39 256 1 2 0
V 39 256 1 3 0

V 39 256 1 4 0
V 39 256 1 5 0
V 39 256 1 6 0
V 39 256 1 7 0

V 39 256 1 8 0
V 39 256 1 9 0
V 39 256 1 10 0
V 39 256 1 11 0

V 39 256 1 12 0
V 39 256 1 13 0
V 39 256 1 14 0
V 39 256 1 15 0

V 39 256 5 100 0
V 39 256 5 101 0
V 39 256 5 102 0
V 39 256 5 103 0

V 39 256 5 104 0
V 39 256 5 105 0
V 39 256 5 106 0
V 39 256 5 107 0

V 39 256 5 108 0
V 39 256 5 109 0
V 39 256 5 110 0
V 39 256 5 111 0

V 39 256 5 112 0
V 39 256 5 113 0
V 39 256 5 114 0
V 39 256 5 115 0

V 39 256 1 0 1
V 39 256 1 1 1
V 39 256 1 2 1
V 39 256 1 3 1

V 39 256 1 4 1
V 39 256 1 5 1
V 39 256 1 6 1
V 39 256 1 7 1

V 39 256 1 8 1
V 39 256 1 9 1
V 39 256 1 10 1
V 39 256 1 11 1

V 39 256 1 12 1
V 39 256 1 13 1
V 39 256 1 14 1
V 39 256 1 15 1

V 39 256 5 116 0
V 39 256 5 117 0
V 39 256 5 118 0
V 39 256 5 119 0

V 39 256 5 120 0
V 39 256 5 121 0
V 39 256 5 122 0
V 39 256 6 123 0

V 39 256 4 100 1
V 39 256 4 101 1
V 39 256 4 102 1
V 39 256 4 103 1

V 39 256 4 104 1
V 39 256 4 105 1
V 39 256 4 106 1
V 39 256 4 107 1
V 39 256 4 108 1


# Wait for these 256 packets to enqueue (D 5*8*64 = 320clks, if there is no extra delay)

# Output 16 Metadatas (trigger Sifting) (O 16)

# Output 4 Metadatas (Finish Sifting process with speed-up factor = 8)
# (Each enqueue: 5clks (or also 5*8=40 clks?); Each dequeue: 8*5=40clks; Each migration: 5clks)


# After First Sifting

V 845 256 6 200 0
V 2 256 6 201 0
V 2 256 6 202 0
V 2 256 6 203 0

V 39 256 6 204 0
V 39 256 6 205 0
V 39 256 6 206 0
V 39 256 6 207 0

V 39 256 6 208 0
V 39 256 6 209 0
V 39 256 6 210 0
V 39 256 6 211 0

V 39 256 3 300 0
V 39 256 3 301 0
V 39 256 3 302 0
V 39 256 3 303 0

V 39 256 3 304 0
V 39 256 3 305 0
V 39 256 3 306 0
V 39 256 3 307 0
V 39 256 3 308 0
